(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{222:function(t,a,s){"use strict";s.r(a);var i=s(0),n=Object(i.a)({},function(){var t=this.$createElement,a=this._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[a("h1",{attrs:{id:"async-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await","aria-hidden":"true"}},[this._v("#")]),this._v(" async await")]),this._v(" "),a("ul",[a("li",[this._v("async, await 는 ES8(ECMAScript2017)의 공식 스펙(링크)으로 비교적 최근에 정의된 문법입니다. async, await를 사용하면 비동기 코드를 작성할 때 비교적 쉽고 명확하게 코드를 작성할 수 있습니다. 자바스크립트는 싱글 스레드 프로그래밍언어기 때문에 비동기처리가 필수적입니다. 비동기 처리는 그 결과가 언제 반환될지 알수 없기 때문에 동기식으로 처리하는 기법들이 사용되어야 합니다. 대표적으로 setTimeout이 있고 callback과 promise가 있습니다. 세 가지 모두 비동기 코드를 동기식으로 작성하는데 훌륭한 기법들이지만, 모두 약간의 문제점을 가지고 있습니다. async 와 await 는 이런 문제들을 해결함과 동시에 그 사용법에 있어서도 훨씬 단순해졌습니다. 각각의 방식들을 살펴본 뒤 async, await 를 어떻게 사용하고 어떤 방식으로 구현되어 있는지 알아보도록 하겠습니다.")])])])},[],!1,null,null,null);a.default=n.exports}}]);